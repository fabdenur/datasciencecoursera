{
    "contents" : "# You can pass functions as arguments to other functions just like you can pass\n# data to functions. Let's say you define the following functions:\n#\n# add_two_numbers <- function(num1, num2){\n#    num1 + num2\n# }\n#\n# multiply_two_numbers <- function(num1, num2){\n#\tnum1 * num2\n# }\n#\n# some_function <- function(func){\n#    func(2, 4)\n# }\n#\n# As you can see we use the argument name \"func\" like a function inside of \n# \"some_function().\" By passing functions as arguments \n# some_function(add_two_numbers) will evaluate to 6, while\n# some_function(multiply_two_numbers) will evaluate to 8.\n# \n# Finish the function definition below so that if a function is passed into the\n# \"func\" argument and some data (like a vector) is passed into the dat argument\n# the evaluate() function will return the result of dat being passed as an\n# argument to func.\n#\n# Hints: This exercise is a little tricky so I'll provide a few example of how\n# evaluate() should act:\n#    1. evaluate(sum, c(2, 4, 6)) should evaluate to 12\n#    2. evaluate(median, c(7, 40, 9)) should evaluate to 9\n#    3. evaluate(floor, 11.1) should evaluate to 11\n\nevaluate <- function(func, dat){\n  func(dat)\n\n}\n",
    "created" : 1448069755293.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "550689839",
    "id" : "852AF892",
    "lastKnownWriteTime" : 1448069805,
    "path" : "/var/folders/5a/5aCPldkmEeC6EWj3gabVSk+++TU/-Tmp-//RtmpVDq8ir/evaluate.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "type" : "r_source"
}